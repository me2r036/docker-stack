version: '2.0'

services:
    webproxy:
      hostname: webproxy
      image: webproxy:latest
      ports:
        - ${WEBPROXY_PORT_80}:80
        - ${WEBPROXY_PORT_443}:443
      environment:
        USING_VARNISH: ${USING_VARNISH}
        VARNISH_NODE0: ${VARNISH_NODE0}
        MAGE_NODE0: ${MAGE_NODE0}
      volumes:
        - ./configs/webproxy/nginx/conf.d/:/etc/nginx/conf.d
        - ./configs/webproxy/nginx/nginx.conf:/etc/nginx/nginx.conf
        - ./configs/webproxy/nginx/certs:/etc/pki/tls/certs
        - ./logsbase/webproxy:/var/log/nginx
      networks:
        - mydev

    varnish:
      hostname: varnish
      image: varnish:latest
      restart: always
      environment:
        VCL_CONFIG: /data/varnish/magento2.vcl
        MAGE_NODE0: ${MAGE_NODE0}
      volumes:
        - ./configs/varnish/:/data/varnish
      networks:
        - mydev

    redis:
      hostname: redis
      image: redis:latest
      networks:
        - mydev

    rabbitmq:
      hostname: rabbitmq
      image: rabbitmq:latest
      networks:
        - mydev

    db:
      image: mysql
      restart: always
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      volumes:
        - ${MYSQL_SHARE}:/sharedata
        - ${MYSQL_DATA}:/var/lib/mysql
        - ${MYSQL_CONFIG}:/etc/mysql/my.cnf
      ports:
        - "3306:3306"
      networks:
        - mydev

    phpmyadmin:
      image: phpmyadmin/phpmyadmin:latest
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      links:
        - db
      ports:
        - "8580:80"
      networks:
        - mydev

    magento2:
      hostname: magento2
      image: magento2:latest
      volumes:
        - ${MAGE_PROJECT_FOLDER}:/var/www/html
        - ${MAGE_NGX_CONST}:/etc/nginx/const
        - ${MAGE_NGX_RULES}:/etc/nginx/rules
        - ./configs/magento2/nginx/conf.d:/etc/nginx/conf.d
        - ./configs/magento2/nginx/nginx.conf:/etc/nginx/nginx.conf
        - ./logsbase/magento/node1:/var/log/nginx
      networks:
        - mydev

    laravel:
      hostname: laravel
      image: laravelphp70:latest
      ports:
        - 8083:80
      volumes:
        - ${LARAVEL_PROJECT_FOLDER}:/var/www/html
        - ./configs/laravel/nginx/conf.d:/etc/nginx/conf.d
      networks:
        - mydev

    react:
      hostname: react
      image: react:latest
      ports:
        - 3001:3000
      volumes:
        - ${REACT_APP_FOLDER}:/var/reactapp
      networks:
        - mydev

    elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VER_TAG}
      environment: ['http.host=0.0.0.0', 'transport.host=127.0.0.1', 'ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
      ports: ['127.0.0.1:${ELA_PORT_9200}:9200']
      networks: ['mydev']
      volumes:
        - ./elasticstack/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
        - ${ELASTIC_SEARCH_INDEX_DATA}:/usr/share/elasticsearch/data/nodes

    kibana:
      image: docker.elastic.co/kibana/kibana:${ELK_VER_TAG}
      environment:
        - ELASTICSEARCH_USERNAME=kibana
        - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      ports: ['127.0.0.1:${KIBANA_PORT_5601}:5601']
      networks: ['mydev']
      depends_on: ['elasticsearch']
      volumes:
        - ./elasticstack/config/kibana.yml:/usr/share/kibana/config/kibana.yml

    logstash:
      image: docker.elastic.co/logstash/logstash:${ELK_VER_TAG}
      environment:
        - 'xpack.monitoring.elasticsearch.password=${ELASTIC_PASSWORD}'
      # Provide a simple pipeline configuration for Logstash with a bind-mounted file.
      volumes:
        - ./elasticstack/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      networks: ['mydev']
      depends_on: ['elasticsearch', 'setup_logstash']


    filebeat:
      image: filebeat
      #image: docker.elastic.co/beats/filebeat:${ELK_VER_TAG}
      volumes:
        - ./logsbase:/mnt/log:ro
      networks: ['mydev']
      depends_on: ['elasticsearch', 'setup_filebeat']

   # elkredis:
   #  image: redis:latest
   #   ports: ["6381:6379"]
   #   networks: ['mydev']

    # Run a short-lived container to set up Logstash.
    setup_logstash:
      image: centos:7
      volumes: ['./elasticstack/scripts/setup-logstash.sh:/usr/local/bin/setup-logstash.sh:ro']
      # The script may have CR/LF line endings if using Docker for Windows, so
      # make sure that they don't confuse Bash.
      command: ['/bin/bash', '-c', 'cat /usr/local/bin/setup-logstash.sh | tr -d "\r" | bash']
      environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
      networks: ['mydev']
      depends_on: ['elasticsearch']

    setup_kibana:
      image: centos:7
      volumes: ['./elasticstack/scripts/setup-kibana.sh:/usr/local/bin/setup-kibana.sh:ro']
      command: ['/bin/bash', '-c', 'cat /usr/local/bin/setup-kibana.sh | tr -d "\r" | bash']
      environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
      networks: ['mydev']
      depends_on: ['elasticsearch']

    setup_filebeat:
      image: docker.elastic.co/beats/filebeat:${ELK_VER_TAG}
      volumes: ['./elasticstack/scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro']
      command: /usr/local/bin/setup-beat.sh filebeat
      environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
      networks: ['mydev']
      depends_on: ['kibana']

    jenkins:
      image: jenkins/jenkins:latest
      restart: always
      hostname: jenkins
      ports:
        - 4002:8080
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /usr/bin/docker:/usr/bin/docker
        - "/usr/lib/x86_64-linux-gnu/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7"
      networks:
        - mydev
